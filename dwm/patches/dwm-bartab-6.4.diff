From 7d8116e8f3104168cdcd78bba5107e11025ada6d Mon Sep 17 00:00:00 2001
From: Ratakor <contact@ratakor.com>
Date: Sat, 18 Mar 2023 14:29:44 +0100
Subject: [PATCH] Show the titles of all visible windows in the status bar with
 optional borders in between each titles

---
 config.def.h |  1 +
 dwm.c        | 60 ++++++++++++++++++++++++++++++++++++++++++----------
 2 files changed, 50 insertions(+), 11 deletions(-)

diff --git a/config.def.h b/config.def.h
index 9efa774..bbbd75d 100644
--- a/config.def.h
+++ b/config.def.h
@@ -5,6 +5,7 @@ static const unsigned int borderpx  = 1;        /* border pixel of windows */
 static const unsigned int snap      = 32;       /* snap pixel */
 static const int showbar            = 1;        /* 0 means no bar */
 static const int topbar             = 1;        /* 0 means bottom bar */
+static const int barborders         = 1;        /* 0 means no borders in bar */
 static const char *fonts[]          = { "monospace:size=10" };
 static const char dmenufont[]       = "monospace:size=10";
 static const char col_gray1[]       = "#222222";
diff --git a/dwm.c b/dwm.c
index c2bd871..d58c043 100644
--- a/dwm.c
+++ b/dwm.c
@@ -124,6 +124,7 @@ struct Monitor {
 	unsigned int tagset[2];
 	int showbar;
 	int topbar;
+	int barborders;
 	Client *clients;
 	Client *sel;
 	Client *stack;
@@ -148,6 +149,7 @@ static void arrange(Monitor *m);
 static void arrangemon(Monitor *m);
 static void attach(Client *c);
 static void attachstack(Client *c);
+static void bartab(Monitor *m, int offx, int sw);
 static void buttonpress(XEvent *e);
 static void checkotherwm(void);
 static void cleanup(void);
@@ -415,6 +417,50 @@ attachstack(Client *c)
 	c->mon->stack = c;
 }
 
+void
+bartab(Monitor *m, int offx, int sw)
+{
+	Client *c;
+	int i, x, w, clientsnmaster = 0, clientsnstack = 0, clientsnfloating = 0;
+
+	for (i = 0, c = m->clients; c; c = c->next) {
+		if (!ISVISIBLE(c))
+			continue;
+		if (c->isfloating) {
+			clientsnfloating++;
+			continue;
+		}
+		if (i < m->nmaster)
+			clientsnmaster++;
+		else
+			clientsnstack++;
+		i++;
+	}
+
+	for (c = m->clients, i = 0; c; c = c->next) {
+		if (!ISVISIBLE(c))
+			continue;
+
+		x = offx + (((m->mw - offx - sw) / (clientsnmaster + clientsnstack + clientsnfloating)) * i);
+		w = (m->mw - offx - sw) / (clientsnmaster + clientsnstack + clientsnfloating);
+
+		drw_setscheme(drw, scheme[m->sel == c ? SchemeSel : SchemeNorm]);
+		drw_text(drw, x, 0, w, bh, lrpad / 2, c->name, 0);
+
+		/* Floating win indicator */
+		if (c->isfloating) drw_rect(drw, x + 2, 2, 5, 5, 0, 0);
+
+		/* Optional borders between tabs */
+		if (barborders) {
+			XSetForeground(drw->dpy, drw->gc, drw->scheme[ColBorder].pixel);
+			XFillRectangle(drw->dpy, drw->drawable, drw->gc, x, 0, 1, bh);
+			XFillRectangle(drw->dpy, drw->drawable, drw->gc, x + w - 1, 0, 1, bh);
+		}
+
+		i++;
+	}
+}
+
 void
 buttonpress(XEvent *e)
 {
@@ -734,17 +780,9 @@ drawbar(Monitor *m)
 	drw_setscheme(drw, scheme[SchemeNorm]);
 	x = drw_text(drw, x, 0, w, bh, lrpad / 2, m->ltsymbol, 0);
 
-	if ((w = m->ww - tw - x) > bh) {
-		if (m->sel) {
-			drw_setscheme(drw, scheme[m == selmon ? SchemeSel : SchemeNorm]);
-			drw_text(drw, x, 0, w, bh, lrpad / 2, m->sel->name, 0);
-			if (m->sel->isfloating)
-				drw_rect(drw, x + boxs, boxs, boxw, boxw, m->sel->isfixed, 0);
-		} else {
-			drw_setscheme(drw, scheme[SchemeNorm]);
-			drw_rect(drw, x, 0, w, bh, 1, 1);
-		}
-	}
+	drw_rect(drw, x, 0, m->ww - tw - x, bh, 1, 1);
+	if ((w = m->ww - tw - x) > bh)
+		bartab(m, x, tw+5);
 	drw_map(drw, m->barwin, 0, 0, m->ww, bh);
 }
 
-- 
2.40.0
